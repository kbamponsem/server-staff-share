

user nginx nginx;

# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto;

pid /run/nginx.pid;

include /etc/nginx/modules-enabled/*.conf;

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;

# only log critical errors
error_log /var/log/nginx/error.log crit;


# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;
    
    # optimized to serve many clients with each thread, essential for linux
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low
    multi_accept on;
}

http {

    # HTTPS
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 24h;
    ssl_session_tickets off;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
    ssl_ciphers EECDH+CHACHA20:EECDH+AES;
    ssl_ecdh_curve X25519:prime256v1:secp521r1:secp384r1;

    ssl_certificate /etc/letsencrypt/live/staffshare.surge.sh/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/staffshare.surge.sh/privkey.pem;

    

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # to boost I/O on HDD we can disable access logs
    access_log off;

    ##
    # Basic Settings
    ##

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;
    
    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;
    
    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;
#        keepalive_timeout 15;
    types_hash_max_size 2048;
    # server_tokens off;

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;


    ##
    # Gzip Settings
    ##

    # reduce the data that needs to be sent over network -- for testing environment
    gzip on;
    gzip_comp_level  2;
    gzip_min_length  1000;
    gzip_proxied     expired no-cache no-store private auth;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 2;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    # number of requests client can make over keep-alive 
    keepalive_requests 100;

    server_tokens off;

    # limit the number of connections per single IP
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # limit the number of requests for a given session
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;


    # if the request body size is more than the buffer size, then the entire (or partial)
    # request body is written into a temporary file
	client_body_buffer_size 10K;

    # buffer size for reading client request header
	client_header_buffer_size 1k;

    # maximum number and size of buffers for large headers to read from client request
	large_client_header_buffers 2 1k;

    # read timeout for the request body from client -- for testing environment
    # request timed out -- default 60
    client_body_timeout   3m;
    
    # how long to wait for the client to send a request header -- for testing environment
    client_header_timeout 3m;

	client_max_body_size 8m;


    # zone which we want to limit by upper values, we want limit whole server
    server {
        limit_conn conn_limit_per_ip 10;
        limit_req zone=req_limit_per_ip burst=10 nodelay;
    }

    # Redirect to HTTPS non-www
    server {
        if ($host = www.staffshare.surge.sh) {
            return 301 https://$host$request_uri;
        } 

        if ($host = staffshare.surge.sh) {
            return 301 https://$host$request_uri;
        } 

        server_name staffshare.surge.sh www.staffshare.surge.sh;
        listen 80;
        return 404; 
    }

    # Main domain
    server {
        listen 443 ssl http2 default_server;

        server_name staffshare.surge.sh;

        location / {
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   Host      $host;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            proxy_pass         http://staff-share:3000;
        }

        # Certbot
        location /.well-known/ {
             root /var/lib/certbot;
        }
    }
}